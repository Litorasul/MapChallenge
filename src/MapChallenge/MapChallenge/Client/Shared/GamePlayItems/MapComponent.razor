@using Syncfusion.Blazor.Maps
@using MapChallenge.Client.Infrastructure
@using MapChallenge.Client.Game
@using MapChallenge.Shared.ViewModels
@using static MapChallenge.Shared.GlobalConstants;
@inject IGameStartInfo GameStartInfo
@inject IGameEngine Engine

<div>
    <SfMaps Height="auto">
        <MapsZoomSettings Enable="true" PinchZooming="true"></MapsZoomSettings>
        <MapsAreaSettings Background="#bfc6c7"></MapsAreaSettings>

        <MapsLayers>
            <MapsLayer ShapeData="@this.GetSettings()"
                       ShapePropertyPath='@("name")'
                       ShapeDataPath="@DataPath"
                       DataSource="@MapData">
                <MapsShapeSettings Fill="#ffffff">
                    <MapsShapeBorder Color="#000000" Width="0.5"></MapsShapeBorder>
                </MapsShapeSettings>
                <MapsLayerTooltipSettings Visible="true" ValuePath="@DataPath"></MapsLayerTooltipSettings>
                <MapsLayerSelectionSettings Enable="true" Fill="red" Opacity="1"></MapsLayerSelectionSettings>
                <MapsEvents ShapeSelected="OnClickCallback"></MapsEvents>
                <MapsLayerHighlightSettings Enable="true" Fill="green">
                    <MapsLayerHighlightBorder Color="white" Width="1"></MapsLayerHighlightBorder>
                </MapsLayerHighlightSettings>
            </MapsLayer>
        </MapsLayers>
    </SfMaps>
</div>



@code {

    [Parameter]
    public EventCallback<IShapeSelectedEventArgs> OnClickCallback { get; set; }

    public string DataPath { get; set; }

    public IList<GameViewModel> MapData { get; set; }

    private MapDataSettings GetSettings()
    {
        var settings = new MapDataSettings
        {
            async = true,
            type = "GET",
        };

        switch (this.GameStartInfo.Continent)
        {
            case GameContinentType.Africa:
                settings.dataOptions = AfricaMapPath;
                break;
            case GameContinentType.Asia:
                settings.dataOptions = AsiaMapPath;
                break;
            case GameContinentType.Europe:
                settings.dataOptions = EuropeMapPath;
                break;
            case GameContinentType.SouthAmerica:
                settings.dataOptions = SouthAmericaMapPath;
                break;
        }
        if (this.GameStartInfo.Subject == GameSubjectType.UsaStates || this.GameStartInfo.Subject == GameSubjectType.UsaStateCapitals)
        {
            settings.dataOptions = UsaMapPath;
        }

        return settings;
    }


    protected override async Task OnInitializedAsync()
    {
        this.DataPath = "Name";
        this.MapData = await this.Engine.FetchMapDataAsync(this.GameStartInfo.Continent, this.GameStartInfo.Subject);
    }
}
